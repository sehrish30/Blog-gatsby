{"version":3,"sources":["webpack:///./src/components/Layout/index.js","webpack:///./src/pages/404.js","webpack:///./src/components/SEO/index.js"],"names":["Layout","children","darkMode","useContext","ModeContext","data","useMetaDataQuery","console","log","title","theme","darkTheme","lightTheme","siteTitle","NotFoundPage","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,qFAuBeA,IAbA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACTC,EAAYC,qBAAWC,KADC,GAEzBC,EAAOC,cAGb,OAFAC,QAAQC,IAAIH,EAAKI,OAGf,kBAAC,IAAD,CAAeC,MAAOR,EAAWS,IAAYC,KAC3C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQC,UAAWR,EAAKI,QACvBR,K,kCCnBP,wDAaea,UARM,kBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKL,MAAM,mBACX,yCACA,yF,kCCTJ,iDAYA,SAASM,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMT,EAAS,EAATA,MAC9BU,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFR,MAAOA,EACPe,cAAa,QAAUL,EAAKG,aAAab,MACzCS,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASjB,GAEX,CACEkB,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASjB,GAEX,CACEgB,KAAK,sBACLC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-404-js-d85f2cea57dffa5d2e9c.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n//Components\r\nimport Header from 'components/Header';\r\nimport { GlobalStyles, lightTheme, darkTheme } from 'styles/GlobalStyles';\r\n//hooks\r\nimport { useMetaDataQuery } from 'hooks/useMetaDataQuery';\r\n\r\nimport { ModeContext } from 'context/ModeProvider';\r\n\r\nconst Layout = ({ children }) => {\r\n  const [darkMode] = useContext(ModeContext);\r\n  const data = useMetaDataQuery();\r\n  console.log(data.title);\r\n\r\n  return (\r\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\r\n      <GlobalStyles />\r\n      <Header siteTitle={data.title} />\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/SEO';\r\n\r\nconst NotFoundPage = () => (\r\n  <Layout>\r\n    <SEO title=\"404: Not found\" />\r\n    <h1>NOT FOUND</h1>\r\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n  </Layout>\r\n);\r\n\r\nexport default NotFoundPage;\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}