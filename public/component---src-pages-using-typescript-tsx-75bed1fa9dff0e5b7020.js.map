{"version":3,"sources":["webpack:///./src/components/layout/index.js","webpack:///./src/components/seo/index.js","webpack:///./src/pages/using-typescript.tsx"],"names":["Layout","children","darkMode","useContext","ModeContext","data","useMetaDataQuery","console","log","title","theme","darkTheme","lightTheme","GlobalStyles","Header","siteTitle","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","query","UsingTypescript","path","buildTime","href","to"],"mappings":"2OAuBeA,EAbA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACTC,EAAYC,qBAAWC,KADC,GAEzBC,EAAOC,cAGb,OAFAC,QAAQC,IAAIH,EAAKI,OAGf,kBAAC,IAAD,CAAeC,MAAOR,EAAWS,IAAYC,KAC3C,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,UAAWV,EAAKI,QACvBR,I,YCPP,SAASe,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMV,EAAS,EAATA,MAC9BW,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAACO,EAAA,EAAD,CACEC,eAAgB,CACdP,QAEFT,MAAOA,EACPiB,cAAa,QAAUN,EAAKG,aAAad,MACzCU,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASnB,GAEX,CACEoB,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASR,EAAKG,aAAaO,QAE7B,CACEH,KAAK,gBACLC,QAASnB,GAEX,CACEkB,KAAK,sBACLC,QAASN,IAEXS,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,QC5DFiB,GAFEC,UAZyC,SAAC,GAAD,IAAG7B,EAAH,EAAGA,KAAM8B,EAAT,EAASA,KAAT,OACtD,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAK1B,MAAM,qBACX,sEACA,uEAA4C,wCAA5C,+DAAyH,2CAAzH,wEACA,uEAA4C,0CAA5C,oBAAgF,0CAAhF,gBAAgH,yCAAhH,UACA,6DAAkC0B,EAAlC,wBAA6D9B,EAAKe,KAAKgB,UAAvE,KACA,8DAAmC,uBAAGC,KAAK,6CAAR,kCAAnC,KACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,6BAMiB","file":"component---src-pages-using-typescript-tsx-75bed1fa9dff0e5b7020.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\n//Components\r\nimport Header from 'components/Header';\r\nimport { GlobalStyles, lightTheme, darkTheme } from 'styles/GlobalStyles';\r\n//hooks\r\nimport { useMetaDataQuery } from 'hooks/useMetaDataQuery';\r\n\r\nimport { ModeContext } from 'context/ModeProvider';\r\n\r\nconst Layout = ({ children }) => {\r\n  const [darkMode] = useContext(ModeContext);\r\n  const data = useMetaDataQuery();\r\n  console.log(data.title);\r\n\r\n  return (\r\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\r\n      <GlobalStyles />\r\n      <Header siteTitle={data.title} />\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\nexport default Layout;\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","// If you don't want to use TypeScript you can delete this file!\r\nimport React from \"react\"\r\nimport { PageProps, Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\r\n  <Layout>\r\n    <SEO title=\"Using TypeScript\" />\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>This means that you can create and write <em>.ts/.tsx</em> files for your pages, components etc. Please note that the <em>gatsby-*.js</em> files (like gatsby-node.js) currently don't support TypeScript yet.</p>\r\n    <p>For type checking you'll want to install <em>typescript</em> via npm and run <em>tsc --init</em> to create a <em>.tsconfig</em> file.</p>\r\n    <p>You're currently on the page \"{path}\" which was built on {data.site.buildTime}.</p>\r\n    <p>To learn more, head over to our <a href=\"https://www.gatsbyjs.org/docs/typescript/\">documentation about TypeScript</a>.</p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}